
# This file was *autogenerated* from the file get_d.sage
from sage.all_cmdline import *   # import sage library

_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_0x10001 = Integer(0x10001); _sage_const_4 = Integer(4); _sage_const_16075043011792317702314886102947415867389005788775646985921769735667763497545302824191943535380623937133010105678608525588010746665008631519574789537497184 = Integer(16075043011792317702314886102947415867389005788775646985921769735667763497545302824191943535380623937133010105678608525588010746665008631519574789537497184); _sage_const_64392795853847475796939596948374573513341136006013188358665448316305707477998438325517993586430100318003625505157712138814030987620038360820900112359350226402638642419396935215229157012026467896203963294845355310085476165076942465877433408205263068546705226319393063008332679430070032638523530045872344446063 = Integer(64392795853847475796939596948374573513341136006013188358665448316305707477998438325517993586430100318003625505157712138814030987620038360820900112359350226402638642419396935215229157012026467896203963294845355310085476165076942465877433408205263068546705226319393063008332679430070032638523530045872344446063)
n = _sage_const_64392795853847475796939596948374573513341136006013188358665448316305707477998438325517993586430100318003625505157712138814030987620038360820900112359350226402638642419396935215229157012026467896203963294845355310085476165076942465877433408205263068546705226319393063008332679430070032638523530045872344446063 
p_plus_q = _sage_const_16075043011792317702314886102947415867389005788775646985921769735667763497545302824191943535380623937133010105678608525588010746665008631519574789537497184 
P = PolynomialRing(ZZ, names=('x',)); (x,) = P._first_ngens(1)
f = x**_sage_const_2  - p_plus_q*x + n
p = f.roots()[_sage_const_0 ][_sage_const_0 ]
q = n // p
print(p)
print(q)
assert p*q == n
if p % _sage_const_4  == _sage_const_1 :
	a = (p-_sage_const_1 )**_sage_const_2 
else:
	a = p**_sage_const_2 -_sage_const_1 
if q % _sage_const_4  == _sage_const_1 :
	b = (q-_sage_const_1 )**_sage_const_2 
else:
	b = q**_sage_const_2 -_sage_const_1 
phi = (p**_sage_const_3 -p)*(q**_sage_const_3 -q)
d = (_sage_const_0x10001 ).inverse_mod(phi)
print(phi)
print(d)
assert (_sage_const_0x10001  * d) % phi == _sage_const_1 

